from aiogram import types
from aiogram.dispatcher import FSMContext

from pkg.data import config
from pkg.keyboards.inline.inline_tasks import confirm_support, reply_support
from pkg.states import states


async def support(message: types.Message):

    await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É?', reply_markup=await confirm_support())


async def call_support(call: types.CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.answer('üëã –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å\n'
                              '–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –≤—Å—ë –∏ –ø—Ä–∏–º–µ–º –º–µ—Ä—ã üòå')
    await states.Support.add_text.set()


async def send_to_admin(message: types.Message, state: FSMContext):
    for admin in config.ADMINS:
        await message.bot.send_message(admin, '<b>‚ÜòÔ∏è[MESSAGE FROM USER]‚ÜôÔ∏è</b>')
        await message.copy_to(admin, reply_markup=await reply_support(message.from_user.id))
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
    await state.finish()


async def reply_to_user(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.edit_reply_markup()
    user_id = callback_data.get('user_id')
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    await states.Support.reply_msg.set()
    await state.update_data(user_id=user_id)


async def send_reply(message: types.Message, state: FSMContext):
    await state.update_data(reply_msg=message.text)
    async with state.proxy() as data:
        user_id = data.get('user_id')
        reply_msg = data.get('reply_msg')
    m = [
        '‚ö†Ô∏è –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚ö†Ô∏è\n',
        f'{reply_msg}'
    ]
    await message.bot.send_message(user_id, '\n'.join(m))
    await state.finish()
